<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ZappyChat - OTP Login</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow-x: hidden;
    }

    /* Animated background particles */
    .bg-animation {
      position: absolute;
      width: 100%;
      height: 100%;
      overflow: hidden;
      z-index: 0;
    }

    .particle {
      position: absolute;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      animation: float 15s infinite linear;
    }

    .particle:nth-child(1) { width: 20px; height: 20px; left: 10%; animation-delay: 0s; }
    .particle:nth-child(2) { width: 15px; height: 15px; left: 20%; animation-delay: 2s; }
    .particle:nth-child(3) { width: 25px; height: 25px; left: 30%; animation-delay: 4s; }
    .particle:nth-child(4) { width: 18px; height: 18px; left: 40%; animation-delay: 6s; }
    .particle:nth-child(5) { width: 22px; height: 22px; left: 50%; animation-delay: 8s; }
    .particle:nth-child(6) { width: 16px; height: 16px; left: 60%; animation-delay: 10s; }
    .particle:nth-child(7) { width: 28px; height: 28px; left: 70%; animation-delay: 12s; }
    .particle:nth-child(8) { width: 12px; height: 12px; left: 80%; animation-delay: 14s; }

    @keyframes float {
      0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
      10% { opacity: 1; }
      90% { opacity: 1; }
      100% { transform: translateY(-100px) rotate(360deg); opacity: 0; }
    }

    .container {
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      padding: 40px;
      width: 90%;
      max-width: 420px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(255, 255, 255, 0.2);
      position: relative;
      z-index: 1;
      animation: slideUp 0.8s ease-out;
    }

    @keyframes slideUp {
      from { opacity: 0; transform: translateY(30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .logo-section {
      text-align: center;
      margin-bottom: 35px;
    }

    .logo {
      font-size: 3rem;
      margin-bottom: 10px;
      animation: bounce 2s infinite;
    }

    @keyframes bounce {
      0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
      40% { transform: translateY(-10px); }
      60% { transform: translateY(-5px); }
    }

    h1 {
      font-size: 2.2rem;
      font-weight: 700;
      color: white;
      margin-bottom: 8px;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .subtitle {
      color: rgba(255, 255, 255, 0.8);
      font-size: 1rem;
      font-weight: 300;
    }

    .form-group {
      margin-bottom: 25px;
      position: relative;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-size: 0.95rem;
      font-weight: 500;
      color: rgba(255, 255, 255, 0.9);
    }

    .input-container {
      position: relative;
    }

    input {
      width: 100%;
      padding: 16px 20px;
      border-radius: 12px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      font-size: 1rem;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      transition: all 0.3s ease;
      outline: none;
    }

    input:focus {
      border-color: rgba(255, 255, 255, 0.5);
      background: rgba(255, 255, 255, 0.15);
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    input::placeholder {
      color: rgba(255, 255, 255, 0.6);
    }

    .btn {
      width: 100%;
      padding: 16px;
      border: none;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
    }

    .btn:active {
      transform: translateY(0);
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }

    .btn:hover::before {
      left: 100%;
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    #otp-section {
      opacity: 0;
      max-height: 0;
      overflow: hidden;
      transition: all 0.5s ease;
    }

    #otp-section.show {
      opacity: 1;
      max-height: 200px;
    }

    .otp-inputs {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin: 20px 0;
    }

    .otp-digit {
      width: 50px;
      height: 50px;
      text-align: center;
      font-size: 1.5rem;
      font-weight: 600;
      border-radius: 10px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      background: rgba(255, 255, 255, 0.1);
      color: white;
      transition: all 0.3s ease;
    }

    .otp-digit:focus {
      border-color: rgba(255, 255, 255, 0.5);
      background: rgba(255, 255, 255, 0.15);
      transform: scale(1.1);
    }

    #message {
      margin-top: 20px;
      text-align: center;
      font-size: 0.95rem;
      font-weight: 500;
      min-height: 24px;
      transition: all 0.3s ease;
    }

    .success {
      color: #4ade80;
      animation: fadeIn 0.5s ease;
    }

    .error {
      color: #f87171;
      animation: shake 0.5s ease;
    }

    .info {
      color: rgba(255, 255, 255, 0.8);
      animation: fadeIn 0.5s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
      20%, 40%, 60%, 80% { transform: translateX(5px); }
    }

    .loader {
      display: none;
      width: 20px;
      height: 20px;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
      margin: 0 auto;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .resend-section {
      text-align: center;
      margin-top: 20px;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .resend-section.show {
      opacity: 1;
    }

    .resend-btn {
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.8);
      text-decoration: underline;
      cursor: pointer;
      font-size: 0.9rem;
      transition: color 0.3s ease;
    }

    .resend-btn:hover {
      color: white;
    }

    .timer {
      color: rgba(255, 255, 255, 0.6);
      font-size: 0.85rem;
      margin-top: 10px;
    }

    @media (max-width: 480px) {
      .container {
        padding: 30px 25px;
        margin: 20px;
      }
      
      h1 {
        font-size: 1.8rem;
      }
      
      .otp-digit {
        width: 45px;
        height: 45px;
        font-size: 1.3rem;
      }
    }
  </style>
</head>
<body>
  <div class="bg-animation">
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
  </div>

  <div class="container">
    <div class="logo-section">
      <div class="logo">ðŸ’¬</div>
      <h1>ZappyChat</h1>
      <p class="subtitle">Secure Login with OTP</p>
    </div>

    <div class="form-group">
      <label for="phone">ðŸ“± Phone Number</label>
      <div class="input-container">
        <input type="tel" id="phone" placeholder="+91 XXXXX XXXXX" />
      </div>
    </div>

    <button class="btn" onclick="sendOTP()" id="sendBtn">
      <span class="btn-text">Send OTP</span>
    </button>

    <div id="otp-section">
      <div class="form-group">
        <label>ðŸ”‘ Enter 6-digit OTP</label>
        <div class="otp-inputs">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 0)">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 1)">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 2)">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 3)">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 4)">
          <input type="text" class="otp-digit" maxlength="1" oninput="moveToNext(this, 5)">
        </div>
      </div>

      <button class="btn" onclick="verifyOTP()" id="verifyBtn">
        <span class="btn-text">Verify OTP</span>
      </button>

      <div class="resend-section" id="resendSection">
        <button class="resend-btn" onclick="resendOTP()">Resend OTP</button>
        <div class="timer" id="timer"></div>
      </div>
    </div>

    <div class="loader" id="loader"></div>
    <p id="message"></p>
  </div>

  <script>
    let resendTimer = 0;
    let timerInterval;

    function showMessage(text, type = 'info') {
      const messageEl = document.getElementById('message');
      messageEl.textContent = text;
      messageEl.className = type;
    }

    function showLoader(show = true) {
      const loader = document.getElementById('loader');
      const sendBtn = document.getElementById('sendBtn');
      const verifyBtn = document.getElementById('verifyBtn');
      
      if (show) {
        loader.style.display = 'block';
        sendBtn.disabled = true;
        verifyBtn.disabled = true;
      } else {
        loader.style.display = 'none';
        sendBtn.disabled = false;
        verifyBtn.disabled = false;
      }
    }

    function formatPhoneNumber(input) {
      let value = input.value.replace(/\D/g, '');
      if (value.startsWith('91')) {
        value = value.substring(2);
      }
      if (value.length > 0) {
        if (value.length <= 5) {
          value = value;
        } else {
          value = value.substring(0, 5) + ' ' + value.substring(5, 10);
        }
        input.value = '+91 ' + value;
      }
    }

    document.getElementById('phone').addEventListener('input', function() {
      formatPhoneNumber(this);
    });

    function moveToNext(current, index) {
      if (current.value.length === 1 && index < 5) {
        document.querySelectorAll('.otp-digit')[index + 1].focus();
      }
      
      // Check if all digits are filled
      const digits = document.querySelectorAll('.otp-digit');
      const allFilled = Array.from(digits).every(digit => digit.value.length === 1);
      
      if (allFilled) {
        setTimeout(() => verifyOTP(), 500);
      }
    }

    // Handle backspace in OTP inputs
    document.querySelectorAll('.otp-digit').forEach((input, index) => {
      input.addEventListener('keydown', function(e) {
        if (e.key === 'Backspace' && this.value === '' && index > 0) {
          document.querySelectorAll('.otp-digit')[index - 1].focus();
        }
      });
    });

    function startResendTimer() {
      resendTimer = 30;
      const timerEl = document.getElementById('timer');
      const resendSection = document.getElementById('resendSection');
      
      resendSection.classList.add('show');
      
      timerInterval = setInterval(() => {
        timerEl.textContent = `Resend available in ${resendTimer}s`;
        resendTimer--;
        
        if (resendTimer < 0) {
          clearInterval(timerInterval);
          timerEl.textContent = '';
        }
      }, 1000);
    }

    async function sendOTP() {
      const phoneInput = document.getElementById('phone').value;
      const phone = phoneInput.replace(/\D/g, '');
      
      // Validate phone number (should be 10 digits for Indian numbers)
      if (phone.length !== 12 || !phone.startsWith('91')) {
        showMessage('Please enter a valid Indian phone number', 'error');
        return;
      }

      const formattedPhone = '+' + phone; // Format as +91XXXXXXXXXX

      showLoader(true);
      showMessage('Sending OTP...', 'info');

      try {
        const response = await fetch('/otpVerify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ phone: formattedPhone })
        });

        const data = await response.json();
        
        showLoader(false);
        
        if (data.success) {
          showMessage('OTP sent successfully to your phone!', 'success');
          document.getElementById('otp-section').classList.add('show');
          document.querySelectorAll('.otp-digit')[0].focus();
          startResendTimer();
        } else {
          showMessage(data.message || 'Failed to send OTP. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Error sending OTP:', error);
        showLoader(false);
        showMessage('Network error. Please check your connection and try again.', 'error');
      }
    }

    async function verifyOTP() {
      const otpDigits = document.querySelectorAll('.otp-digit');
      const enteredOTP = Array.from(otpDigits).map(digit => digit.value).join('');
      
      if (enteredOTP.length !== 6) {
        showMessage('Please enter complete OTP', 'error');
        return;
      }

      const phoneInput = document.getElementById('phone').value;
      const phone = '+' + phoneInput.replace(/\D/g, '');

      showLoader(true);
      showMessage('Verifying OTP...', 'info');

      try {
        const response = await fetch('/VerifiedOtp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            phone: phone,
            otp: enteredOTP 
          })
        });

        const data = await response.json();
        
        showLoader(false);
        
        if (data.success) {
          showMessage('Login successful! Welcome to ZappyChat! ðŸŽ‰', 'success');
          
          // Clear the resend timer
          clearInterval(timerInterval);
          
          // Simulate redirect after success
          setTimeout(() => {
            showMessage('Redirecting to dashboard...', 'info');
            // You can redirect to your main app here
            // window.location.href = '/dashboard';
          }, 2000);
        } else {
          showMessage(data.message || 'Invalid OTP. Please try again.', 'error');
          
          // Clear OTP inputs and show error state
          otpDigits.forEach(digit => {
            digit.value = '';
            digit.style.borderColor = '#f87171';
          });
          
          setTimeout(() => {
            otpDigits.forEach(digit => {
              digit.style.borderColor = 'rgba(255, 255, 255, 0.2)';
            });
          }, 1000);
          
          otpDigits[0].focus();
        }
      } catch (error) {
        console.error('Error verifying OTP:', error);
        showLoader(false);
        showMessage('Network error. Please check your connection and try again.', 'error');
        
        // Reset OTP inputs
        otpDigits.forEach(digit => digit.value = '');
        otpDigits[0].focus();
      }
    }

    function resendOTP() {
      if (resendTimer > 0) return;
      
      clearInterval(timerInterval);
      
      // Clear previous OTP inputs
      document.querySelectorAll('.otp-digit').forEach(digit => digit.value = '');
      
      // Call the same sendOTP function
      sendOTP();
    }

    // Auto-focus phone input on page load
    window.addEventListener('load', () => {
      document.getElementById('phone').focus();
    });
  </script>
</body>
</html>